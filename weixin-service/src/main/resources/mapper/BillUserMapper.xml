<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.weixin.note.serv.dao.BillUserDao">

	<!-- 可根据自己的需求，是否要使用 -->
    <resultMap type="com.weixin.entity.BillUser" id="billUserMap   ">
        <result property="id" column="id"/>
        <result property="name" column="name"/>
        <result property="sex" column="sex"/>
        <result property="dataFlag" column="data_flag"/>
        <result property="createDatetime" column="create_datetime"/>
        <result property="updateDatetime" column="update_datetime"/>
        <result property="code" column="code"/>
    </resultMap>

	<select id="get" resultMap="billUserMap">
		select * from bill_user where id = #{value}
	</select>

	<select id="getList" resultMap="billUserMap">
		select * from bill_user t <include refid="where_clause" />
        <choose>
            <when test="sidx != null and sidx.trim() != ''">
                order by ${sidx} ${order}
            </when>
			<otherwise>
                order by id desc
			</otherwise>
        </choose>
        <!--
		<if test="offset != null and limit != null">
			limit #{offset}, #{limit}
		</if>
		-->
	</select>
	
 	<select id="getCount" resultType="int">
		select count(*) from bill_user t  <include refid="where_clause" />
	</select>

    <!-- 搜索数据区域 -->
    <sql id="where_clause">
        <where>
            1=1
            <if test="id != null and id != ''"> and t.id = #{id} </if>
    		<if test="idVague != null and idVague != ''"> and t.id like concat('%',#{idVague},'%') </if>
            <if test="name != null and name != ''"> and t.name = #{name} </if>
    		<if test="nameVague != null and nameVague != ''"> and t.name like concat('%',#{nameVague},'%') </if>
            <if test="sex != null and sex != ''"> and t.sex = #{sex} </if>
    		<if test="sexVague != null and sexVague != ''"> and t.sex like concat('%',#{sexVague},'%') </if>
            <if test="dataFlag != null and dataFlag != ''"> and t.data_flag = #{dataFlag} </if>
    		<if test="dataFlagVague != null and dataFlagVague != ''"> and t.data_flag like concat('%',#{dataFlagVague},'%') </if>
            <if test="createDatetime != null and createDatetime != ''"> and t.create_datetime = #{createDatetime} </if>
    		<if test="createDatetimeVague != null and createDatetimeVague != ''"> and t.create_datetime like concat('%',#{createDatetimeVague},'%') </if>
            <if test="updateDatetime != null and updateDatetime != ''"> and t.update_datetime = #{updateDatetime} </if>
    		<if test="updateDatetimeVague != null and updateDatetimeVague != ''"> and t.update_datetime like concat('%',#{updateDatetimeVague},'%') </if>
            <if test="code != null and code != ''"> and t.code = #{code} </if>
    		<if test="codeVague != null and codeVague != ''"> and t.code like concat('%',#{codeVague},'%') </if>
        </where>
    </sql>
	 
	<insert id="save" parameterType="com.weixin.entity.BillUser">
		insert into bill_user
		(
			`id`, 
			`name`, 
			`sex`, 
			`data_flag`, 
			`create_datetime`, 
			`update_datetime`, 
			`code`
		)
		values
		(
			#{id}, 
			#{name}, 
			#{sex}, 
			#{dataFlag}, 
			#{createDatetime}, 
			#{updateDatetime}, 
			#{code}
		)
	</insert>
	 
	<update id="update" parameterType="com.weixin.entity.BillUser">
		update bill_user 
		<set>
			<if test="name != null">`name` = #{name}, </if>
			<if test="sex != null">`sex` = #{sex}, </if>
			<if test="dataFlag != null">`data_flag` = #{dataFlag}, </if>
			<if test="createDatetime != null">`create_datetime` = #{createDatetime}, </if>
			<if test="updateDatetime != null">`update_datetime` = #{updateDatetime}, </if>
			<if test="code != null">`code` = #{code}</if>
		</set>
		where id = #{id}
	</update>
	
	<delete id="delete">
		delete from bill_user where id = #{value}
	</delete>
	
	<delete id="deleteBatch">
		delete from bill_user where id in 
		<foreach item="id" collection="array" open="(" separator="," close=")">
			#{id}
		</foreach>
	</delete>

</mapper>